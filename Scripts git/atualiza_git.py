#!/usr/bin/env python3
"""
Script Python interativo para atualizar o reposit√≥rio Git automaticamente
Execute na raiz do projeto: python atualiza_git.py
"""

import subprocess
import sys
import os
from datetime import datetime
import shutil

def run_command(command, cwd=None):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True, 
            cwd=cwd
        )
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)

def get_project_root():
    """Obt√©m o diret√≥rio raiz do projeto"""
    current_dir = os.getcwd()
    while current_dir != os.path.dirname(current_dir):
        if os.path.exists(os.path.join(current_dir, '.git')):
            return current_dir
        current_dir = os.path.dirname(current_dir)
    return os.getcwd()

def clean_git_locks(project_root):
    """Remove arquivos de lock do Git se existirem"""
    lock_files = [
        os.path.join(project_root, '.git', 'index.lock'),
        os.path.join(project_root, '.git', 'MERGE_HEAD.lock'),
        os.path.join(project_root, '.git', 'refs', 'heads', 'main.lock')
    ]
    for lock_file in lock_files:
        if os.path.exists(lock_file):
            try:
                os.remove(lock_file)
                print(f"üîì Removido arquivo de lock: {os.path.basename(lock_file)}")
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel remover {lock_file}: {e}")

def handle_merge_conflicts(project_root, branch):
    print("‚ö†Ô∏è Detectados conflitos de merge. Tentando resolver...")
    success, output, error = run_command("git status --porcelain", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao verificar status: {error}")
        return False
    if "UU" in output:
        print("üîß Detectados arquivos com conflitos. Tentando resolver...")
        if "logs/sgfp.log" in output:
            print("üìù Detectado arquivo de log com conflito. Sobrescrevendo...")
            success, output, error = run_command("git checkout --ours logs/sgfp.log", cwd=project_root)
            if success:
                success, output, error = run_command("git add logs/sgfp.log", cwd=project_root)
                if success:
                    print("‚úÖ Conflito no arquivo de log resolvido.")
                else:
                    print(f"‚ùå Erro ao adicionar arquivo de log: {error}")
                    return False
            else:
                print(f"‚ùå Erro ao resolver conflito no log: {error}")
                return False
        success, output, error = run_command("git commit --no-edit", cwd=project_root)
        if success:
            print("‚úÖ Merge conclu√≠do com sucesso.")
            return True
        else:
            print(f"‚ùå Erro ao finalizar merge: {error}")
            return False
    return True

def sync_with_remote(project_root, branch):
    print("üîÑ Sincronizando com o reposit√≥rio remoto...")
    clean_git_locks(project_root)
    success, output, error = run_command("git status --porcelain", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao verificar status: {error}")
        return False
    if output.strip():
        print("üìù H√° altera√ß√µes locais. Deseja commitar antes do pull? [s/N]")
        resp = input().strip().lower()
        if resp == 's':
            success, output, error = run_command("git add .", cwd=project_root)
            if not success:
                if "index.lock" in error:
                    print("üîì Detectado arquivo de lock. Removendo e tentando novamente...")
                    clean_git_locks(project_root)
                    success, output, error = run_command("git add .", cwd=project_root)
                    if not success:
                        print(f"‚ùå Erro ao adicionar altera√ß√µes: {error}")
                        return False
                else:
                    print(f"‚ùå Erro ao adicionar altera√ß√µes: {error}")
                    return False
            print("Digite uma mensagem de commit personalizada (ou pressione Enter para mensagem autom√°tica):")
            msg = input().strip()
            if not msg:
                msg = f"Altera√ß√µes locais antes do pull: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            success, output, error = run_command(f'git commit -m "{msg}"', cwd=project_root)
            if not success:
                print(f"‚ùå Erro ao fazer commit: {error}")
                return False
        else:
            print("‚ö†Ô∏è Pull ser√° feito sem commit das altera√ß√µes locais!")
    print("‚¨áÔ∏è Baixando altera√ß√µes do reposit√≥rio remoto...")
    success, output, error = run_command(f"git pull origin {branch}", cwd=project_root)
    if not success:
        if "conflict" in error.lower() or "merge" in error.lower():
            print("‚ö†Ô∏è Detectados conflitos durante o pull.")
            return handle_merge_conflicts(project_root, branch)
        else:
            print(f"‚ùå Erro no pull: {error}")
            return False
    print("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso.")
    return True

def ensure_git_repo(project_root):
    git_dir = os.path.join(project_root, '.git')
    if os.path.exists(git_dir):
        return True
    print("‚ùå N√£o foi encontrado um reposit√≥rio Git neste diret√≥rio.")
    print("Deseja inicializar um novo reposit√≥rio Git aqui? [S/n]")
    resp = input().strip().lower()
    if resp == 'n':
        print("Opera√ß√£o cancelada pelo usu√°rio.")
        return False
    # Inicializa o reposit√≥rio
    success, output, error = run_command("git init", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao inicializar o reposit√≥rio: {error}")
        return False
    print("‚úÖ Reposit√≥rio Git inicializado.")
    print("Deseja adicionar um reposit√≥rio remoto (GitHub, GitLab, etc)? [S/n]")
    resp = input().strip().lower()
    if resp == 'n':
        print("‚ö†Ô∏è Nenhum reposit√≥rio remoto configurado. Voc√™ pode adicionar depois com 'git remote add origin <url>'")
        return True
    print("Digite a URL do reposit√≥rio remoto (ex: https://github.com/usuario/repositorio.git):")
    url = input().strip()
    if not url:
        print("‚ö†Ô∏è Nenhuma URL informada. Voc√™ pode adicionar depois com 'git remote add origin <url>'")
        return True
    success, output, error = run_command(f"git remote add origin {url}", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao adicionar reposit√≥rio remoto: {error}")
        return False
    print("‚úÖ Reposit√≥rio remoto adicionado.")
    print("Qual o nome da branch principal? [main]")
    branch = input().strip()
    if not branch:
        branch = 'main'
    # Cria branch principal se n√£o existir
    success, output, error = run_command(f"git checkout -b {branch}", cwd=project_root)
    if not success and 'already exists' not in error:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel criar branch {branch}: {error}")
    print(f"üåø Branch principal definida: {branch}")
    # Verifica se j√° existe commit inicial
    success, output, error = run_command("git log --oneline", cwd=project_root)
    if success and output:
        print("‚ö†Ô∏è Este reposit√≥rio j√° possui commits.")
        print("Deseja apenas atualizar o reposit√≥rio (pull/push) ou fazer um commit inicial de todos os arquivos?")
        print("[1] Apenas atualizar (recomendado se j√° existe commit)")
        print("[2] Fazer commit inicial de todos os arquivos")
        escolha = input("Escolha 1 ou 2 [1]: ").strip()
        if escolha != '2':
            print("Seguindo para atualiza√ß√£o normal do reposit√≥rio...")
            return True
    print("Deseja fazer o primeiro commit de todos os arquivos? [S/n]")
    resp = input().strip().lower()
    if resp != 'n':
        run_command("git add .", cwd=project_root)
        msg = f"Primeiro commit: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        run_command(f'git commit -m "{msg}"', cwd=project_root)
        print("‚úÖ Primeiro commit realizado.")
        print("Deseja enviar para o reposit√≥rio remoto agora? [S/n]")
        resp = input().strip().lower()
        if resp != 'n':
            run_command(f"git push -u origin {branch}", cwd=project_root)
            print("üöÄ Push inicial realizado.")
    print("Reposit√≥rio Git pronto para uso!")
    return True

def move_venv_temporariamente(project_root):
    venv_path = os.path.join(project_root, '.venv')
    temp_path = os.path.join(project_root, '..', 'venv_temp')
    if os.path.exists(venv_path):
        print('üîÑ Movendo .venv temporariamente para evitar conflito com o pull...')
        shutil.move(venv_path, temp_path)
        return True, temp_path
    return False, None

def restaura_venv(project_root, temp_path):
    venv_path = os.path.join(project_root, '.venv')
    if os.path.exists(temp_path):
        print('üîÑ Restaurando .venv ao projeto...')
        shutil.move(temp_path, venv_path)
        return True
    return False

def adiciona_venv_gitignore(project_root):
    gitignore_path = os.path.join(project_root, '.gitignore')
    if not os.path.exists(gitignore_path):
        with open(gitignore_path, 'w') as f:
            f.write('.venv/\n')
        print('‚úÖ .venv/ adicionado ao .gitignore')
        return
    with open(gitignore_path, 'r+') as f:
        conteudo = f.read()
        if '.venv/' not in conteudo:
            f.write('\n.venv/\n')
            print('‚úÖ .venv/ adicionado ao .gitignore')

def main():
    print("üîÑ Iniciando atualiza√ß√£o interativa do reposit√≥rio Git...")
    project_root = get_project_root()
    print(f"üìÅ Diret√≥rio do projeto: {project_root}")
    clean_git_locks(project_root)
    if not ensure_git_repo(project_root):
        return False
    # Verifica se j√° existe commit
    success, output, error = run_command("git log --oneline", cwd=project_root)
    if not success or not output:
        print("‚ö†Ô∏è Este reposit√≥rio ainda n√£o possui nenhum commit.")
        print("O que deseja fazer?")
        print("[1] Commit e push de todos os arquivos locais para o GitHub (atualizar remoto com o que est√° aqui)")
        print("[2] Puxar hist√≥rico do reposit√≥rio remoto (git pull origin <branch>)")
        print("[3] Sair")
        escolha = input("Escolha 1, 2 ou 3 [1]: ").strip()
        if escolha == '3':
            print("Opera√ß√£o cancelada pelo usu√°rio.")
            return False
        if escolha == '1' or escolha == '':
            print("Adicionando todos os arquivos ao controle de vers√£o...")
            run_command("git add .", cwd=project_root)
            msg = input("Digite a mensagem do commit (ou pressione Enter para mensagem padr√£o): ").strip()
            if not msg:
                msg = f"Atualiza√ß√£o do sistema local para o GitHub: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            success, output, error = run_command(f'git commit -m "{msg}"', cwd=project_root)
            if not success and 'nothing to commit' in output + error:
                print("Nenhuma altera√ß√£o para commitar.")
            elif not success:
                print(f"‚ùå Erro ao fazer commit: {error}")
                return False
            else:
                print("‚úÖ Commit realizado com sucesso.")
            print("Enviando altera√ß√µes para o GitHub...")
            success, output, error = run_command("git push origin main", cwd=project_root)
            if not success:
                print(f"‚ùå Erro ao fazer push: {error}")
                print("Se o erro for de hist√≥rico divergente, rode um pull/rebase manualmente.")
                return False
            print("üöÄ Push realizado com sucesso! Seu reposit√≥rio remoto est√° atualizado.")
            return True
        # O resto do fluxo segue como j√° est√° para a op√ß√£o 2
    # Descobre branch atual
    success, branch, error = run_command("git rev-parse --abbrev-ref HEAD", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao obter branch atual: {error}")
        return False
    print(f"üåø Branch atual: {branch}")
    if not sync_with_remote(project_root, branch):
        print("‚ùå Falha na sincroniza√ß√£o com o reposit√≥rio remoto.")
        return False
    success, output, error = run_command("git status --porcelain", cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao verificar status do Git: {error}")
        return False
    if not output.strip():
        print("‚úÖ Nenhuma altera√ß√£o para enviar.")
        return True
    print("üìù Altera√ß√µes detectadas:")
    print(output)
    print("Deseja adicionar e commitar essas altera√ß√µes? [S/n]")
    resp = input().strip().lower()
    if resp == 'n':
        print("‚ùå Commit cancelado pelo usu√°rio.")
        return False
    print("Digite uma mensagem de commit personalizada (ou pressione Enter para mensagem autom√°tica):")
    msg = input().strip()
    if not msg:
        msg = f"Atualiza√ß√£o autom√°tica: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    print(f"üì¶ Adicionando altera√ß√µes...")
    success, output, error = run_command("git add .", cwd=project_root)
    if not success:
        if "index.lock" in error:
            print("üîì Detectado arquivo de lock. Removendo e tentando novamente...")
            clean_git_locks(project_root)
            success, output, error = run_command("git add .", cwd=project_root)
            if not success:
                print(f"‚ùå Erro ao adicionar altera√ß√µes: {error}")
                return False
        else:
            print(f"‚ùå Erro ao adicionar altera√ß√µes: {error}")
            return False
    print(f"üíæ Fazendo commit: {msg}")
    success, output, error = run_command(f'git commit -m "{msg}"', cwd=project_root)
    if not success:
        print(f"‚ùå Erro ao fazer commit: {error}")
        return False
    print(f"‚úÖ Commit realizado: {output}")
    print("Deseja fazer push para o GitHub agora? [S/n]")
    resp = input().strip().lower()
    if resp == 'n':
        print("‚ö†Ô∏è Push cancelado pelo usu√°rio. Voc√™ pode fazer push manualmente depois.")
        return True
    print(f"üöÄ Enviando para o GitHub...")
    success, output, error = run_command(f"git push origin {branch}", cwd=project_root)
    if not success:
        if "non-fast-forward" in error or "behind" in error:
            print("‚ö†Ô∏è Reposit√≥rio local desatualizado. Tentando sincronizar novamente...")
            if sync_with_remote(project_root, branch):
                success, output, error = run_command(f"git push origin {branch}", cwd=project_root)
                if not success:
                    print(f"‚ùå Erro ao fazer push ap√≥s sincroniza√ß√£o: {error}")
                    return False
            else:
                print("‚ùå Falha na sincroniza√ß√£o.")
                return False
        else:
            print(f"‚ùå Erro ao fazer push: {error}")
            return False
    print(f"‚úÖ Altera√ß√µes enviadas para o GitHub na branch {branch}!")
    print(f"üì§ Push realizado com sucesso: {output}")
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ Atualiza√ß√£o conclu√≠da com sucesso!")
        else:
            print("\nüí• Falha na atualiza√ß√£o!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Opera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erro inesperado: {e}")
        sys.exit(1) 